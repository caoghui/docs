# The source directory tree.
V8_root    := /home/caogh1/workspace/v8
srcdir     := $(V8_root)
abs_srcdir := $(abspath $(srcdir))
libdir     := $(V8_root)/out/x64.debug
builddir   := $(libdir)

ifneq (,$(filter $(origin CC), undefined default))
  CC = $(abspath $(V8_root)/third_party/llvm-build/Release+Asserts/bin/clang)
endif
ifneq (,$(filter $(origin CXX), undefined default))
  CXX = $(abspath $(V8_root)/third_party/llvm-build/Release+Asserts/bin/clang++)
endif
ifneq (,$(filter $(origin CC.host), undefined default))
  CC.host = $(CC)
endif
ifneq (,$(filter $(origin CXX.host), undefined default))
  CXX.host = $(CXX)
endif

CC.target ?= $(CC)
CFLAGS.target ?= $(CPPFLAGS) $(CFLAGS)
CXX.target ?= $(CXX)
CXXFLAGS.target ?= $(CPPFLAGS) $(CXXFLAGS)
LINK.target ?= $(LINK)
LDFLAGS.target ?= $(LDFLAGS)
AR.target ?= $(AR)

# C++ apps need to be linked with g++.
LINK ?= $(CXX.target)

# TODO(evan): move all cross-compilation logic to gyp-time so we don't need
# to replicate this environment fallback in make as well.
CC.host ?= gcc
CFLAGS.host ?= $(CPPFLAGS_host) $(CFLAGS_host)
CXX.host ?= g++
CXXFLAGS.host ?= $(CPPFLAGS_host) $(CXXFLAGS_host)
LINK.host ?= $(CXX.host)
LDFLAGS.host ?=
AR.host ?= ar

DEFS_Debug := \
    '-DCR_CLANG_REVISION=268813-1' \
    '-DV8_TARGET_ARCH_X64' \
    '-DENABLE_GDB_JIT_INTERFACE' \
    '-DV8_DEPRECATION_WARNINGS' \
    '-DV8_IMMINENT_DEPRECATION_WARNINGS' \
    '-DV8_I18N_SUPPORT' \
    '-DV8_USE_EXTERNAL_STARTUP_DATA' \
    '-DV8_SHARED' \
    '-DUSING_V8_SHARED' \
    '-DU_USING_ICU_NAMESPACE=0' \
    '-DU_ENABLE_DYLOAD=0' \
    '-DU_NOEXCEPT=' \
    '-DENABLE_DISASSEMBLER' \
    '-DV8_ENABLE_CHECKS' \
    '-DOBJECT_PRINT' \
    '-DVERIFY_HEAP' \
    '-DDEBUG' \
    '-DTRACE_MAPS' \
    '-D_GLIBCXX_DEBUG=1' \
    '-DENABLE_HANDLE_ZAPPING' \
    '-DENABLE_SLOW_DCHECKS'

# Flags passed to all source files.     
CFLAGS_Debug := \
    -Wall \
    -Werror \
    -Wno-unused-parameter \
    -Wno-long-long \
    -pthread \
    -pedantic \
    -Wmissing-field-initializers \
    -Wno-gnu-zero-variadic-macro-arguments \
    -Wshorten-64-to-32 \
    -fPIC \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -Wno-undefined-var-template \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -Wno-format-pedantic \
    -m64 \
    -m64 \
    -g \
    -O0 \
    -Woverloaded-virtual \
     \
    -Woverloaded-virtual \
    -fdata-sections \
    -ffunction-sections \
    -fdata-sections \
    -ffunction-sections

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
    -Wnon-virtual-dtor \
    -fno-exceptions \
    -fno-rtti \
    -std=gnu++11

INCS_Debug := \
    -I$(srcdir)/. \
    -I$(srcdir)/include \
    -I$(srcdir)/third_party/icu/source/i18n \
    -I$(srcdir)/third_party/icu/source/common

DEFS_Optdebug := \
    '-DCR_CLANG_REVISION=268813-1' \
    '-DV8_TARGET_ARCH_X64' \
    '-DENABLE_GDB_JIT_INTERFACE' \
    '-DV8_DEPRECATION_WARNINGS' \
    '-DV8_IMMINENT_DEPRECATION_WARNINGS' \
    '-DV8_I18N_SUPPORT' \
    '-DV8_USE_EXTERNAL_STARTUP_DATA' \
    '-DV8_SHARED' \
    '-DUSING_V8_SHARED' \
    '-DU_USING_ICU_NAMESPACE=0' \
    '-DU_ENABLE_DYLOAD=0' \
    '-DU_NOEXCEPT=' \
    '-DENABLE_DISASSEMBLER' \
    '-DV8_ENABLE_CHECKS' \
    '-DOBJECT_PRINT' \
    '-DVERIFY_HEAP' \
    '-DDEBUG' \
    '-DTRACE_MAPS' \
    '-D_GLIBCXX_DEBUG=1' \
    '-DENABLE_HANDLE_ZAPPING'

# Flags passed to all source files.
CFLAGS_Optdebug := \
    -Wall \
    -Werror \
    -Wno-unused-parameter \
    -Wno-long-long \
    -pthread \
    -pedantic \
    -Wmissing-field-initializers \
    -Wno-gnu-zero-variadic-macro-arguments \
    -Wshorten-64-to-32 \
    -fPIC \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -Wno-undefined-var-template \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -Wno-format-pedantic \
    -m64 \
    -m64 \
    -g \
    -Woverloaded-virtual \
     \
    -Woverloaded-virtual \
    -fdata-sections \
    -ffunction-sections \
    -O3 \
    -fdata-sections \
    -ffunction-sections \
    -O3

# Flags passed to only C files.
CFLAGS_C_Optdebug :=

# Flags passed to only C++ files.
CFLAGS_CC_Optdebug := \
    -Wnon-virtual-dtor \
    -fno-exceptions \
    -fno-rtti \
    -std=gnu++11

INCS_Optdebug := \
    -I$(srcdir)/. \
    -I$(srcdir)/include \
    -I$(srcdir)/third_party/icu/source/i18n \
    -I$(srcdir)/third_party/icu/source/common

LDFLAGS_Debug := \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -pthread \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -m64 \
    -m64 \
    -rdynamic \
    -rdynamic \
    -Wl,--threads \
    -Wl,--thread-count=4 \
    -Wl,--threads \
    -Wl,--thread-count=4 \
    -Wl,-rpath=\$(libdir)/lib.target/ \
    -Wl,-rpath-link=\$(libdir)/lib.target/

LDFLAGS_Optdebug := \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -pthread \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -m64 \
    -m64 \
    -rdynamic \
    -rdynamic \
    -Wl,--threads \
    -Wl,--thread-count=4 \
    -Wl,--threads \
    -Wl,--thread-count=4 \
    -Wl,-rpath=\$(libdir)/lib.target/ \
    -Wl,-rpath-link=\$(libdir)/lib.target/

LDFLAGS_Release := \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -pthread \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -fuse-ld=gold \
    -B$(V8_root)/third_party/binutils/Linux_x64/Release/bin \
    -m64 \
    -m64 \
    -Wl,-rpath=\$(libdir)/lib.target/ \
    -Wl,-rpath-link=\$(libdir)/lib.target/

LIBS := \
    -ldl \
    -lrt

#host  target
TOOLSET   := target
BUILDTYPE := Debug
obj       := $(builddir)/obj

GYP_CFLAGS   := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
GYP_LDFLAGS  := $(LDFLAGS_$(BUILDTYPE))
LD_INPUTS    := $(obj).target/src/libv8.so $(obj).target/src/libv8_libplatform.a $(obj).target/third_party/icu/libicui18n.so
LD_INPUTS    += $(obj).target/third_party/icu/libicuuc.so $(obj).target/src/libv8_libbase.a


cmd_cc   = $(CC.$(TOOLSET))   $(GYP_CFLAGS)   $(DEPFLAGS) $(CFLAGS.$(TOOLSET))   -c -o $@ $<
cmd_cxx  = $(CXX.$(TOOLSET))  $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<
cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS)  $(LDFLAGS.$(TOOLSET)) -o $@ $< -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)

do_cmd   = $(LINK.$(TOOLSET)) $(GYP_CXXFLAGS) $(CXXFLAGS.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $< \
            -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)

SOURCES=$(wildcard *.cc)
#TARGETS=$(patsubst %.cc, %,$(SOURCES))
TARGETS=engine

all:$(TARGETS)

%:%.cc
	$(call do_cmd)

#$(CXX) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)
#engine:engine.o   
#    $(call cmd_link)

#$(CXX) $(GYP_CXXFLAGS) $(DEPFLAGS) -c -o $@ $<
#engine.o:engine.cc
#    $(call cmd_cxx)


.PHONY:all clean
clean:
	rm -f *.o $(TARGETS)
	
test:
	@echo "this is test"